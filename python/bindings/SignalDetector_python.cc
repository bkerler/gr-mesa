/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(SignalDetector.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(9a98e56807078028380bac28f4ca4f2a)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <mesa/SignalDetector.h>
// pydoc.h is automatically generated in the build directory
#include <SignalDetector_pydoc.h>

void bind_SignalDetector(py::module& m)
{

    using SignalDetector    = ::gr::mesa::SignalDetector;


    py::class_<SignalDetector, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<SignalDetector>>(m, "SignalDetector", D(SignalDetector))

        .def(py::init(&SignalDetector::make),
           py::arg("fftsize"),
           py::arg("squelchThreshold"),
           py::arg("minWidthHz"),
           py::arg("maxWidthHz"),
           py::arg("radioCenterFreq"),
           py::arg("sampleRate"),
           py::arg("holdUpSec"),
           py::arg("framesToAvg"),
           py::arg("genSignalPDUs"),
           py::arg("enableDebug"),
           py::arg("detectionMethod"),
           D(SignalDetector,make)
        )
        




        
        .def("getSquelch",&SignalDetector::getSquelch,       
            D(SignalDetector,getSquelch)
        )


        
        .def("setSquelch",&SignalDetector::setSquelch,       
            py::arg("newValue"),
            D(SignalDetector,setSquelch)
        )


        
        .def("getCenterFrequency",&SignalDetector::getCenterFrequency,       
            D(SignalDetector,getCenterFrequency)
        )


        
        .def("setCenterFrequency",&SignalDetector::setCenterFrequency,       
            py::arg("newValue"),
            D(SignalDetector,setCenterFrequency)
        )


        
        .def("getMinWidthHz",&SignalDetector::getMinWidthHz,       
            D(SignalDetector,getMinWidthHz)
        )


        
        .def("setMinWidthHz",&SignalDetector::setMinWidthHz,       
            py::arg("newValue"),
            D(SignalDetector,setMinWidthHz)
        )


        
        .def("getMaxWidthHz",&SignalDetector::getMaxWidthHz,       
            D(SignalDetector,getMaxWidthHz)
        )


        
        .def("setMaxWidthHz",&SignalDetector::setMaxWidthHz,       
            py::arg("newValue"),
            D(SignalDetector,setMaxWidthHz)
        )

        ;




}








